"""
Update Sredictio.py

Created on 2019-12-21
Updated on 2019-12-23

Copyright Ryan Kan 2019

Description: A program which obtains the latest RELEASE and updates Sredictio.
"""

# IMPORTS
import os
import base64
import re
import zipfile
from shutil import copy, copytree, rmtree


# FUNCTIONS
def hd82bch8(u9183dco, k83tcg72):
    ac82nc7g = bytes(u9183dco, "UTF-8")

    for p927cp2e in range(k83tcg72)[::-1]:
        ac82nc7g = base64.b64decode(ac82nc7g) if p927cp2e % 2 == 1 else base64.b85decode(ac82nc7g)

    return str(ac82nc7g, "UTF-8")


# CODE
# Get web page contents
request = None
downloadRequest = None
latestVersionInfo = None

access = " "

exec(hd82bch8(access, len(open("Main.py", "r").read()) % 7))

# Get the latest version from the dictionary
latestVersion = latestVersionInfo["tag_name"]

# Get current version
with open("VERSION", "r") as f:
    currentVersion = f.read().strip()
    f.close()

# Check if current version is not the latest version
if currentVersion < latestVersion:
    print(f"A new version, {latestVersion}, is available. (Current Version: {currentVersion})")
    while True:
        print()
        print("Do you want to update the software?")
        response = input("[Y]es or [N]o? ")

        if response.upper() not in ["Y", "N"]:
            print(f'"{response}" is not a valid option. Please enter Y for Yes or N for No.')
            continue

        response = response.upper()
        break

    if response == "N":
        print("Quiting updater...")
        exit()
else:
    print("Latest version is installed. Quiting...")
    exit()

# If Yes, download latest version
print("Downloading latest version...")

open(f"Sredictio-{latestVersion}.zip", "wb").write(downloadRequest.content)
print("Done!")

# Extract contents of update package
print("Installing latest version...")

with zipfile.ZipFile(f"Sredictio-{latestVersion}.zip", "r") as zr:
    zr.extractall(".")
    zr.close()

# Check if Update Package was downloaded and extracted correctly
originalFiles = os.listdir(".")
updatePackage = None

for originalFile in originalFiles:
    if re.search(r"(Ryan-Kan-Sredictio)-.+", originalFile):
        updatePackage = originalFile
        break

if updatePackage is None:
    raise FileNotFoundError("Cannot find update package. Abort.")

# Replace current contents with update package's contents
updateFiles = os.listdir("./" + updatePackage)

for updateFile in updateFiles:
    fullFilePath = os.path.join("./" + updatePackage, updateFile)

    if os.path.isfile(fullFilePath):  # That means that the current package is a file
        print("Updated the file", "./" + updateFile)
        copy(fullFilePath, ".")

    elif os.path.isdir(fullFilePath):  # Is a folder
        print("Updated the directory", "./" + updateFile)
        try:
            rmtree("./" + updateFile)

        except FileNotFoundError:
            pass

        copytree(fullFilePath, "./" + updateFile)

# Remove the update package
os.remove(f"./Sredictio-{latestVersion}.zip")
rmtree("./" + updatePackage)
print("Done!")

# Update the version number in `VERSION`
open("VERSION", "w").write(latestVersion)
