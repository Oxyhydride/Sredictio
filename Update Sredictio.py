"""
Update Sredictio.py

Created on 2019-12-21
Updated on 2019-12-23

Copyright Ryan Kan 2019

Description: A program which obtains the latest RELEASE and updates Sredictio.
"""

# IMPORTS
import os
import base64
import re
import zipfile
from shutil import copy, copytree, rmtree


# FUNCTIONS
def hd82bch8(u9183dco, k83tcg72):
    ac82nc7g = bytes(u9183dco, "UTF-8")

    for p927cp2e in range(k83tcg72)[::-1]:
        ac82nc7g = base64.b64decode(ac82nc7g) if p927cp2e % 2 == 1 else base64.b85decode(ac82nc7g)

    return str(ac82nc7g, "UTF-8")


# CODE
# Get web page contents
request = None
downloadRequest = None
latestVersionInfo = None

access = "UUVXfFlTVGI1cFZ7M1JZVk1ha1hRKXlXQFI1RUIlTl5MUHpTeSk8YVdOZDQyUWJ0Qk1SenlscVdvJT9wVDRgJUZWbGlpTlFaUDxXUjc2VGdPPT88ZU8qMllRUCorTWFTeSkwXlJ4b2c3U1RIJEdWe1RTVlBFfmpfUGdZN2FRJiZuY1A7UEsoV21JZnlWbHFqM048PnkjUkMja1pTJGNTM049STJ9UWRVQjNWUUVAMlFaUSg1Tm13O2ZRQnpoP1ZyeXFgV0g0NCVRJTZRc1JCbFJIUSU3clRQY2NlWk9JQm9mUkMjbzhROEhGa1dLJkt1UCorQStTNSNVdE8pKndTVlFFJXJXXlBKTlA7NnZKUmVETT1RRUV5eVJjJGQ9UmFKMEdOPTBhQ1EkO2EoUSFgM1NPS0VJVVQxUXJCVzxfWDNRQ0xFR1FFbytUVmxyZXlXTDd5eFFBU3hmVm5zPyVSWXpKJk5pWj41T0tlN05OPH4oMldOTFUrUkJkWkdQJT00SlNaeSZZV21aOVNSYUFGcVM4WXZkT2p0MmFXSlh5cE87PUs4U1RSTDxTeU5VfVBlKmk4T0t2ZW9TfjZCcFBIdEglU3U8PkZOPipBKFE4UGtBVDIqdmZUMzBsOFJZeXtCV05jMVdXaW5ZZlQxUVNmVk8zRmpSN09vflQyQHdDVDIqWERRODdWcE9JQjcjUWI8OEVQKi1TY1ZeJV9TVntCd35XbXItKFM1JGF5UiNiUldPTD1vfk8rYHtxVzxfWFdRJiY8IVJZLTdRVDB+aGlQQjNkVlQ2dTYqUlloODVOPzFseE5eM0FVTj1IZEJTWiEhYFN5TjdIUyFgQG9QRjZIQ1EhenpxTyl6WURSJXxxUlZRejN6UUVxVGlXTlVhaFBCVWFsUSRzTCFQZT97bFEkPEJMVnJ3LV9ObUUla1FaUV5YVmxpNTJObW9yWVdvPD1vUWZwT2ZSWU5nVVA8bHBhUzhPO2lWQDZ0S1IjaihmUSpLYz9PanRAO1FaaH59Vk1hLTZQZzcxU1JXb1piV29sJHBXSyZJUU9qa34zUyFxVH5RYmxsZ1ZLUXR+UERmSHpRN30kWVdAJV9nUThPP3JWTWF6I09FNkEwU3cmPVFSV21nK1JhSEBIV3FOcDFOaSRNUk9qVUYrUkJKSW9TN35RJldAPmF6UldWTFpXPTI3NU8pX1VQVDFHfVBQRjYtclN5eTl2T0U2TSpWP3shQlI4PWB0UnhuYWhTNEtIYU5eQylLU309NGBRJiYtTlJhWikzTj54ZmlWbGhAeFdrX3I/UllPJkpOaWo4NlY9ITd+UERmSURRQiotX1EmJnp9TmkjLUdWe1VBNU9LZTRMVDIqVW1TdXMqP09MfS0kVmwhKHZQZXd2JVZNYS05UiMhUF9TWlhtK1ZNVDB0UGUoPiFTWk9oOVI3RXZYUzZEU3ZTeU8wT1JXTFA3UGVuT1FSZUVHQVEhej91UEZHVENPPjF5ZlNUSUk0VDE3Y2FXQD03RVIhQyVLVl4lX0lPRVBGUFQzQTlAV052Zz9RJCNzTFJXTlRnUSR1aVpTNjR9QlQ0YGBtT0c5aXlWSzhKelFkTXM/Unp5aUtRQUo4clIjcjRAV292OSZXQD1KNFJZT3M1Vm58THtSNzdsY1FaUlRvUjdoKHRTNFZHZlJCSkl5Vz0yTEBUMkBBRFQxNyMzUjh9PWVXTkI8blJ6LTdxUSQ9VE9RJTcxJlN5KkVeVz0ydmBOQCsxfVEhIzlBTys7MDZRKXh+eFZeZVRkTztsJVdPLUR2eVM1IXRkUllOZ1VWbiNKWVJhN31FUC18bH5XbTg2NFJXVlVIUlkpfmhWXm1VNVdpZHVZUmFrSW9RKkxXe05AO0xmVk5fMFVQRXxAVlNiMjBxUSQlYzJPR1J1X1FiJXR4V05kRzJOPngjRFJCTFotVj1gN3JPS05DdlBjVTthV0soRXFSYWE8QVdKaEZCUGtDQitSI3J1RlM4R2FsUjh+ckhWQEZhJU8pXlNFUldVX3NRZEwxflFaaSREUVpxM35TfjZCbk4+QHIlVnB2VWRUMH5BLVdLJlg5TykqKEZXa3FpPlJ4dyZkUzUkT3BSI2ozP1c8eSN5UCp6cXxWe0xkZ1JZT3Y1VnBDe2dTJFIhMk8tND5SVlFwfCFSZTQyZFAqKmlWV29jLTFObWZRe1QyXlp7UkJBTFpXaWRpblI3R2ZjVkA3S0BSNURwQlJCQUNvUSR8KSZObWU7Q1dvdTRTV0g0R3JSOCU9O1EmbzZNUng/Z3xXaWZDelQzOWhqUmNjbTdOaWotQ1BjZGpXUzUtPThOXk45TVM3flFDUyRhbEVPTD1VMFJjdHxQVDVCfl5SN2k5JlAlJW5VT0tlaGhQKnIkbVJZeWlMUmNkNSpTeSl6NU5eTXEwT2pSez1PRVlrS1I3TyVxUWI8Wm1TNEJvdFJXTjYzU3cldWVSYVpyTlZSPVNaUkJKZVRSeHdkYFZuOyRuU3l4SShTNkRTbFBCS25tVk1hemFRKSp+Y1JZUHpfUzRjdXVTd3VvK1ZudF9nV0poUkJRZGV8JlBCM2d5VDVFSzlUMkBoY1ImRyp1UkJBWG1UMm9GQFFkRHpsU3l4R1RTdz5RTVJZTyZKVDFaK35TWlg8U1N3PS1gVktIUHlUMip2OFBFPHhpV2l2dWZUMUctX1ZzMzB0UzRDKTNSQmxwNVZuYjN2UGV5MlVWS1B9Y1EkJCY4VzwpVmtOcVNPOFFaWklqUWZ4VS1RZGN4fFZNYkMtTz9wWipXaWV3ZldIQ3VKUmFaKChRZGU0Tk5pWj1eUEY4NDFTOGgmZ1MhIXI7Vz0yWTNRODg8NU8pKWBtUSF7NkdRYnNqd1dtOGdFT0VFJTRXaW0hPVJZUGxSUiUmPT9SY3R2QFBIYiNXUEhqYXJSWWdUPlFaUUNYVntUR1lXbUlAb1dLfkt3Vl5sQ3xSWVBaUVFmZ0w1T2p0RV9XPiMtK05eTWFxUUNNZWZQZ1k4NFdOTElxVlFmaWdQLSNVb1JjVEUkUll5NSZWUj52eFM1O0RWUiMhPGVSNHtDRVN1dCE8TmljWUZQZ1piaVM0TFZsUnp5LX1PS01VfVdIQ2ktUnpfcUBXQCViPVJZT3VgTystMEpRZDR3QlI0e2w+UiFDWX1SWXpsVFApSWRZUEJLbkpSY3VDVVQxWk0hUldvY3hTNXwwOVFGPk5RUiV9e0tWTUE3V1E3fTAkVntBZkhQRG9aY1IlfXshV21pUlZSQytLbFFaWjYlTy1PVGNSN0dRTk5pJU9XUllndjNTVFNnOFJhUnRCVz4he0RXTFFkVVJjJWRvT0VYZWdQKUlSc1FkVU4yUERXXlBSIzs2bE8pX3xDTnFTXlBRIXokSVAte1lSUzU7KERPSEBgO1BCS3c0UzVgdThXPnt4PlIjc003UWJjNChTIXFeZ1AtYCglUjRfX2NSWXo9Yk9LRVVkU1pxfmxRISFSQ05pdVhSUnh2cWlQQjJESFIoZUtpVnIpcmpRKjJUPFI5ODRKV05jKG5RZnpFO1ZRZloyV2t4a3ZRRXFybFZAUE9IUEh0cGJPLUQqS1BIYmR3Ulduai1PLU1wb1EkdCMyU318NW1SQmQ9Y1JhUl81VDNCcHNSQzs3c1ZwVWRnTkA7VTxRJmRgYVEhe2k7UmE5dGpOPilXT1FBYik8U3UtX2lQKnF4Q048KE9IVk80Wm1RRXFyRVEpKXNuVz4tPkVOPzAqQlY9LSVST0dRYSlRKkF7IVdIV0c0VDNCT3hSWWhrdFEqSl52UmM+JWxQZSlFbldAfT9JUThHbnBUMThTJlFaaTBMTz5LQldOPVJma1deNmA5VlFOeEVSY2RIK1dLJUl1U2JBKExXQH0/Tlc+WmRoUmVEdTNXS352RFN5Z3k4UiEyQFVPPSZUNFI4fiQhUCUmc3pUMl5GNVZscVc8UGVXYCtSYWE2b1FDM1ArUEZQOEpSQkpWSlEkI2dHVDJAOSRQRkhBWFM2NDxXUEhhc3VTJFJmaVJZUG4hT2pLLTRXSmcrNVdIQ3hMT2pCcT9SeG9wVVN9e3NlUEh1MmJXbVJLd1Q1ZHNUUkJsQ1VXbVBkIVN+NCo/V0pPQTVXSDNyP1JjVUIrVntUU05SY2J7dk9LZkNMUUFqYVZSJSY9QFIjcmtwU1RiWmJSWXBjeVFDRGJtUSpMV2BXT3tUJlFBYXMhVz0yOW5SWWg1QVM2NmN9Tylfez1UMVFmTlNUSWdFVk5eTHNSeClmZVFiYWpuUWIkIzdPR2FhS08penNXUmNUc2JPPjF+KldrZk07UmFJbmNQKnpmUVI4JkdwUEJVYXZQZV4yRk9LZF8oVktGcG5SZUR4PlJZcSlTV052aEhSYVJze1FGPld3UngpJlZWS0dpb09HOVdmV144YjNWfGgoNVEmbVBvT0dTODFSI1J3N1IjazkwUjgpOXFSYVp0dE9FT2trUWRVLVBRZik7dlNaaElPU3V0NWBSKFZjSlBFJVBoVlFmWmVSYWooN1JjZEg0V2txbVNSOD0qNFdtUXNuVntCfTRRJCViYFFkSyFyUEU9PyFTfXwqSVdeR0RDUiMtfClSNUV4QFc+aVc7Vks3LWFPPT92eVJhMDt7UmNsJklPPlJ6ak9HWkxQUWJzamJTOEdXJVEkI1VxUiNiT3VTfXtnd1FGKDgyUyNFNF9SJTxhdlZRV3JsUkJUI2hUMihiI1IlPik7Tj1RbWxOaWs/ZlM4STVCUERmSGtSYUhfLVI3NWRXUldlUmxOPkBeT1FkbnlAUmFSXzVUM0IjTVFkMzU5Vm50fFNQRG9AKFJjPmNgUUJfN3NPRUVQfldvJGBwUzg4Wj1RWlFDaFdIVThPV0t9dEVXSlk5bVZReSQ7UWZoUWJSJkhvZlQ1TUtDUDs2dk9UMD5lO1N5V08mTm1XdjVTNjRXM1dMME51V15PVFFSWXl7Qk5pYkdaU3lufGtPKXpZMVEqQWtLUWJsV1lQKnlja1N5T09OUUVXdnJTNEtpdFM1O2E9UjlIcX5RRXFyP05tV1coUGdZZlFRJmVuUFJ4KXI/Tl41SSpRRVd7eVdvazRyUSR0IWVQKUFsc1QxOFNkVz5yI1ZQO09GaVJZUGNYU35Fc2pPamtsclN9PTJZTzskTkRSWXl1a1ZNa0k9Vk9MSVJSN09FP08tTUNaUldvYVBSZTQlaVJCQjBoUChAXkZTOGpNblN1I08yVDE4UyhRZnhWUlAoQEJ0Unp6ZW9TNXNMek9HUG5pV0A9R3VUMl5afVZRT3FwUmFhNm5PakpUKU5AYGotUGNjcTVWS2ExZlN1PDVQUGtCO2RRYlNmb1FidE5QUkM7Sl9TNXQ2RlZyeCFSUiY3eDtSNGBJQFEmJXhrUVppXiVWcGNnKFFmeFVlTj53cFdWbjxlM1FiYWozUGVucGZRZFVgT1drcUxnU3g4b0hSZURaSE5tT0s1USEhMzNQZSg+V1FBMTYxUyRhfT5TNSN6OVI1Q19QV142QG9QSSo+WFJCZDszUGNjZWJQY3c2SVc+LXh4VzxeZEBRaDhRNFQxSE0lV28lSnpOXk1lN1ZsWnJMUSFgRmRUNURFWFEmQDlxVnBlRUxWUXh9b1JafnQqUGdnWldXaXZgRVN9e1UjUWZxVF5SI2tYJVZgX0xzUmNrPnFSeHc2ek8rYGpCUSEhQyhQZVcya1MjRUg0USQ7aiVRJmNmaFJCSlUtUEhaKCZOaXRTQU8peio7VmwjSStTeWZGclZOK35FV2spYktWbFpibFEhckxuUmE5cWtWSzche1M0Qyh9VlFnITBSV1cyblIlPnItUzRBfmNOPThhS1ZwY3soVDNBX2VRYmptMVElN3U4Vz5zcjVTWnoqUE87PVYpUSQlUVhSQy0hY09Me15gU3VzWHhRQTJNdVFic342UyFyLSNTfTt+P1Q1QzBQUSR8VFJSY2NtNk5eVXwjV2ltPT9WcGVRI1FmKXpPUlloYm9SZURsR1JhakQ1USR8V1FSQmRvV1J4b3NHVj8kYjBTIzVKT1dKT1hATj4pWnJRJHV1UlAoeEJ1VDFRZkxSITNHKVFaWjZYUjR7QnpPO2tCaFZOK2B7VnJ4dz5QRER7T1JhOUQ4UllnaV5SKGcxOVNUUk9nVm49anNSYTlEN1FFRWIzUSQ7aX5RYnRLP1FCX3RyUmFIdVBXSnBGLVdraElLVj0ha2xWcHdFKVJ4b1RpV21zQGhOaWJHdFBjVjNUUWRNKyNRKSpJRVFDTCFITz5SbldTOFFpNVJhUk88UmVEdTVQJT10VlFFTkdRVnsxNVlQSFNVMFJhMDs/Tzt9UHhWPXpLWVJCVDNVTj0wbG9TNTtQUVN5Z09LUUFBRXFOXkUzS1dIVTR8USZkJUpXaW5EelBFPH4yUldOSGJWe1R8dVEhYEZVVk5eOz1ROFE7VlA7NntUUkJMIWZSWU5nVVZRV1RFUGNjP1hOPiplK1MheXZ2UjdmeH5WYEBAUlEmZWtoUnpeKVRXPlpkM1IjLWBGU3lXYlJSWWdpU1ZePmFRV15QJD1RKSo2RVJZej02UzU8SVdSYUh0ZFdIVX1+UiM7WWdWezApPFQ1MiNXV2t5WUNTOEdhRlJZTmd5Tml0R2NSNzdsV1N9fC14V21JZnhUMzBualFmXnZIUldudllTdXNYI1c9S3Y/Ull6S0xRKStaZlM2NVBYVktQb3RWXj5ObVI5NyltUCUkfUNWT01sQ1AqcUEqU1RTZERRJndiWVZAR0lNVlFXUD1RIXI7VlJ4P2Q5UllPdjJTOGktcFdpZXokUEJLbjtWPXppdVJ4bzV5U3UhPDZXSmdYa1NacWwjTykpdVhSQztyNFZyXkRhUUYlc0dPR1Ilb1QyeUZEUWZWPCZTdSQycVN+R1poUGNsazFWT0NtQ1JhMHdtUiFEUzBOaWs/YVZwZVEjUWZYezdSYVJfRVJlQ2l7V15RYkZQQkNhfVNUUk9uUWJqYXVTNSRhTVBjUyViUUVXbktWXj8lU1FFb0pDVj89YVdPamtpfFZRWDEwUUVvSkFSN1cqQVIjaitHT0doPHZTdyYtVVE4R0RLUSZ3K3hRaEg9O1ZyekdKUDs2UkZQRTxtN1JZTmdDUmNrcDtWQE9VeE9HYTlGTmlhJTZTdTwjRlZuYjMlUEJVO2dXa3kxOVZRcGhAU3Vze2ROPH5zPk5pJVJVVDIpcWRWcl4oYFImR2puTjw/VDxPS3ZldFAqK0IxUiUlKmlRIV9QRFZ8Zyk4USR0bFpXaVdKbFJhYUl5UllPYGdSNzZIPFIhQjs2V0pQcFJWcGRYWlFibGs8VDNDMiNObXg7TFBCQjRuUSEhRiZTI0U1NFIjWWBmUWJieCVSITJyTlc+e2t8Uzd+b0NTNGQ9MVFiJWxRV05SQGBUMUhrIVI0YH5wUkJVV2ZWTWtJJFdOY0ErUng/SSVSYVIoYVBERU52UiFCezlXSDNAV1FaamRIUUJ5QFlTeDhEflBIOT9CUEhhVlRTOEdaflMhYHI8Vl4mJkNTdyY8YFdpZkM/VDNBX1hSN2YjKVdAfEIwV29rbExTNFQ9VVFaTygjVDFaKHBSOCh8bU5pdFAzVnsyPyRXQDxgcFJZejVET2p0cnRRJDthJVEqQk9BV29rbGFSY2xRJFEmP244Vl4/QHxWcikkYFZANmRnU3lYNmtPK3tvPlM0VWJfT2prLStWS0h4T1IlJj4zUGVwN31TITtBaU5pailrUSZlUFlRKkF+I1dPe2c1Vk1SR15SQlU4KVZPQ09pUmFrSUtXSFUtd1ZuYkZwU318dkVPKy1hQ1FFWEsoU317VVJSQlVUOFQyQEEzT0U1NHJSJTxtaVBncUs1UyEjMUtQJXZ+PFNUUlg+Ujg+TXdXTEhLflBIWmBEUzY1Q2VPP29qJlJZIURkUEY4R0RWTWs2aFZyejdJUmNsM1lSY1VCLU9IQGl9UEZPSz1TfjV5N1FmWUtJU3U8cDVTfjZAJlBCVTs/VktHS29TWll9fVEmdypgUSlAOStSYz1PMU5pdEZ+T0dqdkRRODg2JlQwPjQhT0VHWTVSWWYmKE9MfXhTUzU7WWZSQkxjZ1ZyKSheV0g0LTVRJH0hNFJZZ3V2UCpwaXJXaW5jNFBCMyZVV299d1FSWXpsVlAoP1hWUSQ8LVpUMUctP1ZyZyROUldvY3lUNnVJJlZuOzxYUWJrZ0VTOEd5aFE4N3dYUWRld0tQRTx9PlQxSVNjU3VrKWtSI1o3Z1ZAN0NET2pTO0RRZGQhV1M3fFlCUllPKSZTeDhEKVEhLUk+T0kwO2FXTFEhJFJCSlNIUCV1SkdWdEk2SFJZcGNkTm1mRS1RKSpVRVZNYXpfUyFgTlVRKV5PQk4+KUtRUzhpfV5TNXtWM1BCUyVmV0B8Sm5TNEJkNFJ4b1R6V289ZVZQRjc/I1ZLOEhDVzxfVy1SWXkmRFM4STR1TkAtZTRUMVExfVdrKl5vUSozWl9XaW1OS1c+I29ITykpfWtSY2JWRlEraTVoVDMwbnxXXjZffFdvdE5aVz5zcndRaDlTWFMhO013T0VFYnlTdyhQSVZAUG1LUyF6bWFOXlZYP1JjPlQqUyErJkhRJndZZ1JhWiglTnFSOShTWlpmJlZLN2NYUkJTO3hRK2lmdVM2REd4UVpafnhTdXNYZ1FBSVVXUmVEeDxSQjE2dE9JQVdPUzU8VXBRRU5DZVJZem47U3lXbjdQRT40QVc+I3gpUGVASTFSI3ItUVI1Q0c5UWRvRnVWP30zZFE3fW19UmM+JWxRZGM9dlJjbU5yUyMzI1pXSjZoUFN5eFVfUWQzJUxXSkU8WlEmdnJTUWQzVFBSenlseVZ0UF9qUGVvMnVPO3Q1Vk9qQVpeVDB9fjBRYlRaM1dva310U3lneT9RYmJsJVEkdDJIUGdZVipWPjRRR1ZscVpUVk9DbCtSYWtGJlQxUjl9Vj0jMEBWP3w/Zlc8Xj9iUmM+Zj1Td3VvaVc+PDdNTz45UE1XSFZWU1E4N2h0V3FFOCNUNWVpUVZPTGdxUiU9MnJTeU8wSFBEcGY3UyRheFBTVGEmbE5eVmhiUjdPZntRRVc5QFN1JHUpUkJUI0lQSDk/MFJhMDt8USZ3Nl9XbUgwV1M0REk7Vk9NODNRJH16PlEmbXomT0t3VXNWQDVANFFkZjl1UzRDKTFPK3xEfU8tTjJmUjdFZj1TJGFZK1FGPkJIUUVXPDVTNEs1Pk9JMWNTUzRWUj5UMH17ME9JSylFUSErRihTNFQ7QlN3PkBNUmVFU2dSNU0wUk8rLSNJV21QJEZSeHdnI1MkYWxQUSR0UV9TNGQrc1Z7QWYxUlkrck1RODdnO1BjdT9aV0pnd0pTdWl3b1N4OEJBUWg5U1lSYz80dlQxWilQV05UPGRRJUVwelIjaD1yTl5ETTBWT0tPT1ZsWCpMVDYjRWZSWXl2N05eQ30yU341O29QJT0oWlN5Vnp2UmVELVFQPGImKE9MfS15UWRVODFPLU07LVEmZWErVz4jPW1PRUdMfVNUSHFtUUNDVzRSNHttWVI1Q19WUUIqPVRWSzgodVI1RUJuUjdPZk9SYUl6ZlJhRz0/Tl40fG5SY3VaflJafnFjV15PYFFWbnxoTFApMUhRUUFrY35RRXEyK1Zyb2BPUGdoenxXTmJsaVZwdz1iUyF6eyFXbz1TS1I3NXBaUSFxXztSeitpUlQxWkF2UUVwQ0NQRTx+MldINTlxUGVuT0xTI0UxK1ZSPio/UiE0TTJWcio3VlA7UGZPUll6PWJPRU9BS1deT2B2VzxfXitWPjI7UVEpKlVrUmNkSGFUNUxeZFN3PT17VDFaODJRKkxaQVMhek83UUExWDdQZSg7R09JMnR4UzQxPjlQKiFNQ1FiJS1nU3lvMUJWYEBARVEhIzgtUzNfdD5RJD1LWVBIUlJzV0hVYFFSWVBuYFQ1VUIlV3FEMDlSQkxjRVdpVUJzUTg3fD1QZzhKQlJCVVdkVmxoUT5PK3tvYFFaaSZqUjglbyZQSFJtb1dOY1BlV298LWRSWWdeNVNaI0RzUThJOTZXSE01RFdAfVAmVDFHOzdRQ0IlPU5tRmt6Tzt2YkpWPyU2YlJZTyZHVmA/IzNWT1VCO08peUdTTz4wP2ZRRVhPQ1JjZCVsVnszU0dWT0IrSVFkbX1aUyFgbyRTJGIkcVZ8aSN5UyFfYVdQKTlqNFFoOE4zUmMlXlBOQCsxe087PCVVV2tfZ29SYyVJa1FaUSZ9Uzg4TjdWPSNBa1JjdUxsUlp+dGBRZGRxP1IoVmNOUVpSVVNWT0I7JFEmJmM4UihmbnFQRk9LQFdvJTZ9T0VFUTBSWXprblN5KU9fUEhsOHlUMVFjTFdKR0xPUiY2eSlXT188ZE5teWk1UjRgVV9RRihNJlIlPkBKT0VQM2xTWno1YFN1aXpGUWRDKWFSWU5nQ1J4PnFPVk9VT0JXTDghPE8pKncqUSoyZjxPOz4xME9Lbio8V05ifShRZlY8JlN5TSkzUWRLb1hTWllSY1dINHhNT2psVnFSWWhjTE87PlBJTnFTQzdWXiZJR05AYE1CUSpKUihUMVpOMlZeJmdmVlFYdExWXn1iN1JhMDt7UmMmTmZTWnoqOU5tbypJV143N05UMTdFJE49SHMlUUVFa09RZFVBcVZLWXU/UjVFTERRZmgyY1Fmbz9qV0hFMHdRJmQofVI5N2ArUjVMTUJQQktrJFFkTStTUCoqVzlRJH0haFJjJnhmU3lYM2pUNVYydlImR2Z2UllPczVWbjtQcFJ4KWdGVj97TWhQRkdRUlIlJFV9UldVaFFWTzM2UE9FRT1pTz9vKzNTNEMpM1JCVThTU3gwemhXSDQobk5pJUNWUzQxPWBRZl9FY1MhLWBPVnJ6Nk9WT1ZyJVM1OzFQVnBkSz9XPUJlSFdIRE4wTj53PkBSWVBsY1IjUnxWUWRVLTRRQmBBV1QwfXk1UjdYTzFWQFBPOFFoSEtxU3luLUJQJT5JOFM4R2FCUmFiT2FRWmlfRVJjbU4oUkJVNTxSeCkmTlIjaXEpUGdPI0JTfTwwMFI4KHd1USkqO2tRISsrTVM2REc+V2lVQlBTdXMmfVJhUj4/Vj98bjdWUU59UFN3PzZgV0s9WE9TN307cldvfU1aUkJrWUFSel5sX049MH11U3lYNmtWUU5aQ1BnN0RiTj0wWnxOaWNYJVJXbmo2UjdmI1hObW91YFN5eFVuVnJwNDlRYmpwO1ZuPWpRUVppYUtWSzc+NVdxTF8kUll5XkRXT2BDb1JhUS1MU3c+Xz5TIV57IVJ6eUs7Tz5Bc2NQQjI8PlN5bn1EVDFad19TeU0lRlMhezRrTztiYCNSOH4kbFdLflc+UVpQbldRJnduRldva2xGUVpaVWpXbWlReFI5QVJHTzt1VmBRRTZJMVdIQ1pYUmFIaCpSZUVUN1N3bjEzVnBMTERWcGQ5TVZRZnhVUiU+YH1PK19fTVI1NDBNUSF6bndWS1BOQFJlRHgmUWZASXpSYz5UPVZNUUBHUkIzUStSOD9+P1ZudUxMTmlhQENWTzJHQlZsciFRUWZZSD1XXlFPeE4/MSlWV0w4PUBRJCNnb1JhSGBQV28lQVFQOzZRJlZed0R+T0lBYGFTI0M5OVZwd2NWUmE5cytPamJyflQxUEBmUjVFYUtRQWsjNlZ7MX1IU3V0NVRTNSM8bFM2NlVKU3lua3hTNTxFfldtUGR4T0dSZ0tSY3U7RldKRWJeTy00MFdPKXo5aU9HaSNIUll5djlWXmVUVU8+SVZZVDE3Y0BQZzhKclQyKFo3UjVFTnVWQDVmM1M0SylVUjRgVSpROFJRP1QxOWtJVDA9JWlOPl41TVJlREtsUUNMPCpOPD1ZSE9qYkB4UWYqM0ROXjR8c1JZeWY/T0lUN3ZXaXYlSlQ1RGBZUmU1WWdSYVooPFdITCVlUGNtI3lXaW0tPlNUYnh7UkJKR0xTIV9sfk9LbXdkU3c9PS1PalM7MVEhYHBuU31gP05SN1k8JFFialpgV144T21SOD11PFdOYkIyT0kzN0tOXjNFOVZPVXgjUUY+Qk9PR1B6SFBncip8UCkyWlFWYCl4eFJhYUpWUThRWGpSNTN8I1Y/e1Z8VnBLe3ZTJGJBd1M0QX5NUmU1WjFWT0IrUVJZaTArUmVEeCZRWlpJVFJXTTNSUjRfMCZXbVlzZlIjcnhIUmMkI15TN31YWE9JMWNTUjVNYShTdXMqKVQyXkZHVnJ5Q31SJT0jcVFFZkRFUmVEa35SYUclWFJCQUN7UWRkUTZXa15+IVJZWT95U1RqeXhRRj5XKVFidEIkTm1FV25SV1dFO1N5KW4wT0dqQ0VQQjMmKlA7RzJlUTd9UzlRIS05Yk9qbUdJVnIpQClRQWwoIVJZZ2AqU3dtPTNQZ0Z1ZU87dTx8UmFReihSYTEwWFAoKHNQV21JUXpSeG9maVN1c149VDFITjBTN31DMlZRTlpHUWZ4KFBUMj9oVFIjIXFmVnBDMl9XPnokOVBGNi1rVmx6JXFRODg2R1EmKChMUEV+a09WUVhZPVE3fT9AUjVEZ2RXSk4tMVdMSWMzUEhTXjlWbj1nd1JZTmd4Vl53JVdSY2RFQVEhLUxgT0VZKmdUMip2OFN3PkUzUzRkK3NXPiFMSlZefjJlUThSUShPPlMmYVZRZSl1UyFgTlFPRTdtZFImR2dnUEkpbT9ObU1tcVBETTN6UERlJmdSWXlgJVI3R0A3USpDZmdWPStRKFQzQWopUmFIKUdXTnRNYFFkVnFMUTd9cTNRQTF9clJZekolUDtGI2JSOUhlWU9LZGBIVmxxWldSQzt0JVJDLVFEUjdQeDhWXj45TlFkRCNAUjhARXxXSk85O08qMllNUUNDKVdQKUtZeVI3aEhETyozcCROaSRNYlJ4KGF7UjRgSV9SYWE3TFZuanwpUSFgQ0JSV1Z2K1FFb0o5Ujg9dSVTNFRCZlBFPThPTz45WHFSKGU0LVJhSHRnUmFReiVPPkFwPFEpQEwkUGVYOGJRZGV3Y09FV1EyUzU8STFQSGF7O1BGUXpwU3VpO0BQKUstYlM1c19DU318NW5QO04wKFJZT3VpUWJhWHNXTko9cVdpVW9ITm1weFpUMUhNI09Lb2dlVk1rPG5QOzVxTlEqMlVqUmNkSCpXaW1OelZuYjNsUGdoYl9OaWtWKFE4N1l5UnorNClQZzg2O1ZwVmZfUyFxJTxRN30xa1IlJXZrUllYZDNTNS08aVAmMFR8UmFTM3dRZik/OFJCbWkmVDJeZEhQJXY2QFIlfTh6UlduOXRQSSojRVZANUA0UzRCcDdSIzxkKVFBQTJxUng/UjJWbGlpT1QxSUZAUzU7KERPRzl1e1MhX3ZxU3VrWDdRRWYzcVN1O3tPVl5sUipRJDxkNVN9fH0hUUVFNmFSWXl2QVZAUGFrVj1gfHFSV1ZqOFZsI0pnUyF7MU5WXm5CR1Y9LXJOV05iITdWSzhgQ1IlPHkjV2tAd3RTOEhUI1NaaTV2VzwrUmhRQ00mX1dKcXZRUUJgekNQRE83cVY/fENsUmN1eHtSI1lga08rYDY1Vl51THlRRUdVMFJhSEBGUnp5eHZRJm1QdVE4ODlRVz4tMEZSOUFSeFN1a3VAVnxpTTRXXjZgNlJjVEk2UzY1P3FRZnlqTVBIWihyVm50Rj5UMzBrUFEhYEM3Tl5DKz1PR2grdVY9YDhETmlzRDxTNjZGI1QxMHFrUjglPVFTOEZrNVFibC1HUmVEaTVSYTBuR1BISXdlUiNqNFpWbHB1fFE4N1VgU3U8PXlSYWpENVZuJDZjV09gI1lSV29hUFZPVU59UnhAV1dQRFhIU1AlPCR5UiZHaShPamJmdFE4SEZGUC17KzdXTkJKS1EraVQkTkBgQTZRJmQ1NlNacjJLUjVNT2NSWVBue1JZT0s8UnpxfURPR1JVSFc8QHpnUUVxUSZWTWtJfFdpV1ZnVktHS1JRKkFqeFJhMDZ7UUJecjtOPm8pZlAqK0pZTj55WXlSOH5iZlJZeTVlUWIld3pSJT57QVFkTCVUUTg2QGxWXmU1VFFFZ0lmVlFYWT5TOFh7JlJZaG9XUEZRU2VXQD1HKlFmcUtIVj4yfiNTdXNYd089fnE7Tjw+MDxObWZOX1BEZSZHVDIobmxWUXkkdFdPLVVrUllxaCVPPkFzKFEmZWJqT0tvZ1pQRHBjVlMjM3NQUUFsU21UMVBQfVN5eEl7VnRPJWZWcnd1Zk49UmZAUllOZ3hWXndmZE5pYndWUnhvcl9Xa15PaFM4RztFV0AlUExXPHpVaU9HWkkjTz0peVRRWlFDYFEmbGxWU3c9PjNSWXl1JVI3WEtGUmU0NWVQQkxeK09JMiR0VmxxV0VWYEA9KFJXV2Q5UUNLbGpRRj5KfVJ4d2R9UmVDfkFSYWtGJlFiYlp7TmlqfUFQKTFFTFJha2c1UWJzanlXPntvVVBjY3F5T0VGMW5Wcl9SZFFkY29UVlFOfUpXbWp4Y09qY30zUjg+eFBRRVgwVk9qSjJpUWIleDlRZnlqeFN1PD5TUSU2PkFTNENFOFIjc001U1p6dSRQQktQMFJjPiFGUnpvcFJRJHV1NE8pelVUTmkkPD9SQ3pGT1ZwbTMyVzxfVWhXSlhDYlI2fSVHUiM7OT9QJSR9OU8tNHBtT0tXZ2lRZlgzRlJ4KWRCVm57KyNUMzJ2SFZARjliUUNLbGBRJTY9JVFGPUxBUUM0dGpTeWVAQVZuJVJ3UmVFVDVTeXdTXlZ0RnhYUldMPn1RJm1ONlM3fXlwUStZOD9WckBjZFN5bj1BUSErU3NSNUVOY05xUlhgTl5FUnJXPF9mP1M2NT4rVDB+QSRWe0JTY1E4SHtSVnBkNXRQZ1pBYVI5STROUWZwe01QKmlJJVN9PCFoUzY2Rm9SWWg4N08tRTh3TmlqfXFQZSlPQVEpKV9PU3kqVSFPP3BtNFNiMW5zUUFTMlpObWZ5SlJhYTRZVlFOeFRXTlRWUlFDNEpoVk5gVE5TeXBnbVEpK2xyTyl4bzBObW9pKE49SHMlUSkqeyRRKkpSLVM4WiEtVlFXZUBWXmxGdlJhMHt+TztsX3tXXkdQcFZNYzYxUmNsNV5SYyVJVE8rfEVBVnRQJDVPOyR5NlM4R2EwUjVFT0xSYVFiKVZedmFiVDVCPFNQKD9+R1EkJWJfUWQ0WUVPamJeRE5pbEcxUjVFOTFUM0E5Z1ZwVE96UjdaR0tWcikkQFBnaTYoUmFaKCVXTmw3UlBjY3FYVj0rY3lTeDc9eVQyP2BOV0slSXFXPUN2R08+OVBOVlFXJU5UMWEkTlEkO3lpVlFYd21TdyhuTlZ0RnVkUStpSFhTNEIheFBCU3JpU3d+SlhRRTY2MlEhe3UqUERGSEpRZE1ZMFEqMV9XVj16KVVSYWtGJlMhK15HUkJsPm1RYmpSTFIldTI/UlloITJXXjhhK1ZOKztKU317ZHhUMD5IRlM0VjRWUnpebEBXTlJeUlZRZz89UStaSl5SJT4le05AX3x7UWJTVGBRJm16PVZ7SyQ9UUVwaTtQO0RfJlMkY1BCVzxAa0JRZEtvZlJZZ3ZDU3kpPDNXXjd8R1BjY3o+VDVDO2dRJDxjbVdMMG9nUEU8S2JWTWEhOE8rLT8zUzhZeXRTWnp7TE48JmdgUVpPKz1OQF9KUlI5ODRKUSFxSkZXbyVKJFJhSTxnUihnMUpTJGJNQlN3fkohUGNTKVhPakoleVdxTjA5USZkJHNQRG5MU1Q1VlokUUVXdnVQJjBJTVI0e08xVks3UWpPSF9EcFdeRzleUUVOKDZSOH5yUVIjcnw/UCkxSD5SY2tTSVJCM0UjUldXYztQZV5jQlApQjJXVDIqWFhXTnY3MlI4PSlKUEJVeXpRJTZPNFM0Q19AUjdmPjJTJGJBKVc+PDctUnorbFFXbVJabFdtcn5zUyRhYDdPRVdAUVZPTVopUCp6RzxUNGAxKlI1RVhRVm48Uj1SWXohMVQyKlhlTnFSWHNSQjE0NE4+b1pzV0A8MW5TfXxtSE49MHhzU3UtXj5UMUctaU4+XjJNTy1EKm1QZT8mQ1J4JmhpUUY+QlhRJCNnWVZyKkp4V08qQGdTeWVgOFMhenk3UEV+WUZXTlRKT1QwPSVUUWJsVndWbHI/QE5eTGMzVnIqSkBTfjR8ZVM2NjZ4VDJ4QUROaWJ0S1BnWlA3UyErI3RRJHN+QFErWk5ZVmxoQHdXPF8qMlZRb24oUkJiVkxPamNHP1M4UTV0UCkwIzxPS29eXlFaaVhJUiZHe1FQSEl8QVc+LWRHU307bWFTdTxtN1JCMkxLVnJ4WmhRJnduQVFFR1FgUzd+UTJRKSlefFBFJUhHUUM0VmZSWVhwQVImNm0+Uzg3Xm5SI1p8e1I5MHdvV0pwbXg=".replace("\n", "")

exec(hd82bch8(access, len(open("Main.py", "r").read()) % 7))

# Get the latest version from the dictionary
latestVersion = latestVersionInfo["tag_name"]

# Get current version
with open("VERSION", "r") as f:
    currentVersion = f.read().strip()
    f.close()

# Check if current version is not the latest version
if currentVersion < latestVersion:
    print(f"A new version, {latestVersion}, is available. (Current Version: {currentVersion})")
    while True:
        print()
        print("Do you want to update the software?")
        response = input("[Y]es or [N]o? ")

        if response.upper() not in ["Y", "N"]:
            print(f'"{response}" is not a valid option. Please enter Y for Yes or N for No.')
            continue

        response = response.upper()
        break

    if response == "N":
        print("Quiting updater...")
        exit()
else:
    print("Latest version is installed. Quiting...")
    exit()

# If Yes, download latest version
print("Downloading latest version...")

open(f"Sredictio-{latestVersion}.zip", "wb").write(downloadRequest.content)
print("Done!")

# Extract contents of update package
print("Installing latest version...")

with zipfile.ZipFile(f"Sredictio-{latestVersion}.zip", "r") as zr:
    zr.extractall(".")
    zr.close()

# Check if Update Package was downloaded and extracted correctly
originalFiles = os.listdir(".")
updatePackage = None

for originalFile in originalFiles:
    if re.search(r"(Ryan-Kan-Sredictio)-.+", originalFile):
        updatePackage = originalFile
        break

if updatePackage is None:
    raise FileNotFoundError("Cannot find update package. Abort.")

# Replace current contents with update package's contents
updateFiles = os.listdir("./" + updatePackage)

for updateFile in updateFiles:
    fullFilePath = os.path.join("./" + updatePackage, updateFile)

    if os.path.isfile(fullFilePath):  # That means that the current package is a file
        print("Updated the file", "./" + updateFile)
        copy(fullFilePath, ".")

    elif os.path.isdir(fullFilePath):  # Is a folder
        print("Updated the directory", "./" + updateFile)
        try:
            rmtree("./" + updateFile)

        except FileNotFoundError:
            pass

        copytree(fullFilePath, "./" + updateFile)

# Remove the update package
os.remove(f"./Sredictio-{latestVersion}.zip")
rmtree("./" + updatePackage)
print("Done!")

# Update the version number in `VERSION`
open("VERSION", "w").write(latestVersion)
